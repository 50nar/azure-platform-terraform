jobs:
  - deployment: Deploy
    pool:
      vmImage: ${{ parameters.agentPool }}
    environment: ${{ parameters.environment }}
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop
            
            - task: TerraformInstaller@0
              inputs:
                terraformVersion: ${{ parameters.terraformVersion }}
            - task: TerraformCLI@0
              displayName: Init - ${{ parameters.environment }} - ${{ parameters.component }}
              inputs:
                command: 'init'
                backendType: 'azurerm'
                backendServiceArm: 'dcd-cftapps-${{ parameters.environment }}'
                backendAzureRmResourceGroupName: 'core-infra-${{ parameters.environment }}-rg'
                backendAzureRmStorageAccountName: 'cftapps${{ parameters.environment }}'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: '${{ parameters.component }}/${{ parameters.environment }}.tfstate'
                workingDirectory: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'
            # - task: PowerShell@2
            #   displayName: 'Copy plan'
            #   inputs:
            #     targetType: 'inline'
            #     script: |
            #       $storageAccount = Get-AzStorageAccount -ResourceGroupName core-infra-${{ parameters.environment }}-rg -Name cftapps${{ parameters.environment }}
            #       $ctx = $storageAccount.Context
            #       Get-AzStorageBlobContent -Blob "${{ parameters.component }}/${{ parameters.environment }}${{ parameters.build }}plan" -Container tfstate -Destination $(Pipeline.Workspace)/drop/components/${{ parameters.component }}/${{ parameters.environment }}${{ parameters.build }}plan -Context $ctx
            #     failOnStderr: true
            #     pwsh: true
            - task: TerraformCLI@0
              displayName: Apply - ${{ parameters.environment }} - ${{ parameters.component }}
              inputs:
                command: 'apply'
                commandOptions: '${{ parameters.environment }}${{ parameters.component }}${{ parameters.build }}plan'
                environmentServiceName: 'dcd-cftapps-${{ parameters.environment }}'
                workingDirectory: '$(Pipeline.Workspace)/drop/components/${{ parameters.component }}'